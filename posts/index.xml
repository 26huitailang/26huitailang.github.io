<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Peter&#39;s Blog</title>
    <link>https://26huitailang.github.io/posts/</link>
    <description>Recent content in Posts on Peter&#39;s Blog</description>
    <image>
      <url>https://26huitailang.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://26huitailang.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 27 Dec 2021 11:22:50 +0800</lastBuildDate><atom:link href="https://26huitailang.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neovim</title>
      <link>https://26huitailang.github.io/posts/tools/neovim/</link>
      <pubDate>Mon, 27 Dec 2021 11:22:50 +0800</pubDate>
      
      <guid>https://26huitailang.github.io/posts/tools/neovim/</guid>
      <description>installation brew install neovim plugin use https://github.com/junegunn/vim-plug, install this first.
mkdir ~/.config/nvim/ nvim ~/.config/nvim/init.vim cat &amp;lt;&amp;lt; EOF &amp;gt; ~/.config/nvim/init.vim call plug#begin(&amp;#39;~/.vim/plugged&amp;#39;) call plug#end() EOF  write Plug &#39;fatih/vim-go&#39; between call run :PlugInstall vim config is .vimrc  language support use coc.nvim
Plug &#39;neoclide/coc.nvim&#39;, {&#39;branch&#39;: &#39;release&#39;} :PlugInstall coc-settings.json
{ &amp;#34;languageserver&amp;#34;: { &amp;#34;go&amp;#34;: { &amp;#34;command&amp;#34;: &amp;#34;gopls&amp;#34;, &amp;#34;rootPatterns&amp;#34;: [&amp;#34;go.mod&amp;#34;], &amp;#34;trace.server&amp;#34;: &amp;#34;verbose&amp;#34;, &amp;#34;filetypes&amp;#34;: [&amp;#34;go&amp;#34;] } } } problem:
 build/index.js not found, please install dependencies and compile coc.</description>
    </item>
    
    <item>
      <title>Vim</title>
      <link>https://26huitailang.github.io/posts/tools/vim/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/tools/vim/</guid>
      <description>复制内容到剪贴板  +可以把内容复制到剪贴板寄存器，就能在其他应用中贴。 :reg [register_name] 查看指定寄存器的内容  &amp;#34;+yy // 复制当前行到剪切板&amp;#34;+p // 将剪切板内容粘贴到光标后面&amp;#34;ayy // 复制当前行到寄存器 a&amp;#34;ap // 将寄存器 a 中的内容粘贴到光标后面Vim 有 12 个粘贴板依次编号为：0、1、2、&amp;hellip;、9、a、&amp;quot;、+，其中 + 号为系统粘贴板，” 为临时粘贴板。系统剪切板中的内容可在其他程序中使用。上面的复制指令都可以配合剪切板进行操作。&amp;ldquo;nyw 复制当前单词到 n 号剪切板（双引号开始） &amp;ldquo;np 粘贴 n 号剪切板内容到当前位置后 &amp;ldquo;+Y 复制当前行到系统剪切板&amp;rdquo;+nY 复制当前行往下 n 行到系统剪切板&amp;rdquo;+p 粘贴系统剪切板内容到当前位置后
标记，mark 一下 mc标记一个位置c，当在本页其他地方完成代码之后，有时因为不是用的 vim 的G或g位移操作，所以两个点号不一定能回来，但是如果在离开前就 mark 了它，`c 一下就能会到 c 标记的地方，这里用其他字母也行，只要自己能记住，我从别的地方学的是 e - end，c - current，s - start，比如代码开头的 import 内容或者常量不对调整，则标记一个 s，当前的代码工作地方标记为 c，这样可以在开头和当前不断跳转。
replace  Search and replace :%s/foo/bar/g, Find each occurrence of &amp;lsquo;foo&amp;rsquo; (in all lines), and replace it with &amp;lsquo;bar&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>api security checklist</title>
      <link>https://26huitailang.github.io/posts/security/api-security-checklist/</link>
      <pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/security/api-security-checklist/</guid>
      <description>开发安全的 API 所需要核对的清单
https://github.com/shieldfy/API-Security-Checklist
https://github.com/shieldfy/API-Security-Checklist/blob/master/README-zh.md</description>
    </item>
    
    <item>
      <title>Docker Cheatsheet</title>
      <link>https://26huitailang.github.io/posts/docker/cheatsheet/</link>
      <pubDate>Mon, 06 Dec 2021 17:53:22 +0800</pubDate>
      
      <guid>https://26huitailang.github.io/posts/docker/cheatsheet/</guid>
      <description>docker cheatsheet docker
# 不使用缓存重新build docker build . --no-cache # tag docker build -t peterchen0802/mypandoc:latest . docker tag peterchen0802/mypandoc:latest mypandoc:latest # 查看容器日志 docker logs SERVICE_NAME [-f] # 导出容器 # 注：用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。 docker export CONTAINER &amp;gt; TARFILENAME docker export CONTAINER -o TARFILENAME # 导入容器 docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]] docker import mypandoc.tar peterchen0802/mypandoc:latest # 指定导入的镜像名称 # -----清理 start----- ## 磁盘容量查看 docker system df ## 清理 docker rmi $(docker images --filter &amp;#34;dangling=true&amp;#34; -q) ## 清理无标签的镜像 docker image prune ## 清理磁盘，删除关闭的容器、无用的数据卷、网络，以及dangling镜像（无tag的镜像）。 docker system prune ## 更彻底的删除，将没有容器使用的镜像删除： docker system prune -a # -----清理 end----- docker-compose</description>
    </item>
    
    <item>
      <title>tmux</title>
      <link>https://26huitailang.github.io/posts/devenv/tmux/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/devenv/tmux/</guid>
      <description>tmux 终端服用软件，session可以保存在tmux server中，就算iterm等终端关闭也可以恢复，远程连接的时候避免掉线（类似的功能的软件还有，screen）。
参考  十分钟学会 tmux Tmux - Linux从业者必备利器 * cheatsheet 优雅地使用命令行：Tmux 终端复用 Tmux使用手册  本机，cheatsheet-tmux  安装 brew install tmux  基于参考第二篇文章，配置：
$ cd $ rm -rf .tmux $ git clone https://github.com/gpakosz/.tmux.git $ ln -s -f .tmux/.tmux.conf $ cp .tmux/.tmux.conf.local . 概念  session，不同的会话 window，不同的窗口，物理划分，一个session可以有多个window pane，窗格，一个window可以用过 %/&amp;quot; 划分为多个窗格  tmux操作  tmux ls，查看打开的session tmux a，恢复 tmux a -t SESSION,恢复指定session  C-b操作  前缀快捷键，^b % 左右平分出两个pane &amp;quot; 上下平分出两个pane x 关闭当前窗格 { 当前窗格前移 } 当前窗格后移 ; 选择上次使用的窗格 o 选择下一个窗格，也可以使用上下左右方向键来选择 space 切换窗格布局，tmux 内置了五种窗格布局，也可以通过 ⌥1 至 ⌥5来切换 z 最大化当前窗格，再次执行可恢复原来大小 q 显示所有窗格的序号，在序号出现期间按下对应的数字，即可跳转至对应的窗格  resize pane  C-b :resize-pane -D/U/R/L 20  修改配置  ~/.</description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>https://26huitailang.github.io/posts/nginx/nginx/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/nginx/nginx/</guid>
      <description>nginx [toc]
常用命令 nginx -s stop nginx -s reload 简介 反向代理 一句话：
 什么是正向代理？代理的是客户端 什么是反向代理？代理的是服务器，客户端是无感知的  nginx反向代理配置
正常情况： client —(send request)—&amp;gt; server 代理情况： client —(send request)—&amp;gt; clinet proxy –(send request)—&amp;gt; server 反向代理： client -(send request)-&amp;gt; server proxy -(send request)-&amp;gt; other server  可以看到反向代理并不是真的反过来，而是代理人的身份由客户端转向了服务端，也因为代理是在服务端，所以客户端是对此无感知的。
负载均衡 将原先集中请求到单个服务器的请求分发到多个服务器上，目的是为了支持服务横向扩展。
动静分离 配置 全局 配置文件开始到events之间的内容，主要是设置一些影响nginx运行的配置指令，比如：
 用户（组） worker process数量 进程pid存放路径 日志存放路径和类型 配置文件的引入  events 配置nginx服务器与用户的网络连接，此部分对性能影响较大，应根据实际情况处理，比如：
 是否开启对多worker process下的网络连接进行序列化 是否允许同时接受多个网络连接 选取处理连接的事件驱动模型 每个worker 支持的最大连接数等  http  全局配置 server配置  全局 location配置    server 配置和匹配规则 一个http服务可以有多个server，而对server的路径匹配，反向代理都是在这里配置的。</description>
    </item>
    
    <item>
      <title>Pandoc</title>
      <link>https://26huitailang.github.io/posts/markdown/pandoc/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/markdown/pandoc/</guid>
      <description>Pandoc 开始  install pandoc install miktext build  中文要选择合适的字体否则无法成功创建 fc-list  mac: brew install fontconfig fc-list :lang-zh &amp;gt; fonts.txt fc-list -f &amp;ldquo;%{family}\n&amp;rdquo; :lang=zh   参数解释  -o: 输出文件 &amp;ndash;from: 输入文件类型 &amp;ndash;template: 模版文件 &amp;ndash;listings: 列表 &amp;ndash;pdf-engine: pdf生成用的引擎 -V: 参数  CJKmainfont: 中文文字字体        pandoc &amp;#34;README.md&amp;#34; -o &amp;#34;document.pdf&amp;#34; --from markdown --template &amp;#34;./template.latex&amp;#34; --listings --pdf-engine &amp;#34;xelatex&amp;#34; -V CJKmainfont=&amp;#34;PingFang SC&amp;#34; &amp;amp;&amp;amp; open document.pdf data-dir DATADIR
macos: ~/.</description>
    </item>
    
    <item>
      <title>Podman</title>
      <link>https://26huitailang.github.io/posts/podman/readme/</link>
      <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/podman/readme/</guid>
      <description>README 初次使用  podman root用户和非root用户的images和container是分开的 非root用户使用podman generate systemd命令生成的文件，拷贝到~/.config/systemd/user/下面，使用systemctl --user执行  流程演示
podman pull docker.io/nginx:latest podman create --name nginx -p 8080:80 nginx:latest mkdir -p ~/.config/systemd/user cd ~/.config/systemd/user podman generate systemd --files --name nginx systemctl --user enable container-nginx systemctl --user start container-nginx curl http://127.0.0.1:8080 </description>
    </item>
    
    <item>
      <title>Upgrade debian main version</title>
      <link>https://26huitailang.github.io/posts/linux/debian/upgrade/</link>
      <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/linux/debian/upgrade/</guid>
      <description>Upgrade debian main version update $ apt-get update &amp;amp;&amp;amp; apt-get upgrade backup sources.list $ cp /etc/apt/sources.list /etc/apt/sources.list.bak replace `stretch` to `buster` of `/etc/apt/sources.list` $ sed -i &amp;#39;s/stretch/buster/g&amp;#39; /etc/apt/sources.list run upgrade $ apt-get update &amp;amp;&amp;amp; apt-get upgrade run dist upgrade $ apt-get dist-upgrade $ reboot $ lsb_release -a clean: $ apt-get autoremove </description>
    </item>
    
    <item>
      <title>Gitlab CI/CD</title>
      <link>https://26huitailang.github.io/posts/devops/gitlab/gitlab-ci-cd/</link>
      <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/devops/gitlab/gitlab-ci-cd/</guid>
      <description>Gitlab CI/CD For the development environment.
Install with docker Read the official documentation for how to install docker.
I installed docker on the MacOS.
gitlab documentation
sudo docker run --detach \  --hostname 192.168.8.226 \  --publish 443:443 --publish 80:80 --publish 8022:22 \  --name gitlab \  --restart always \  --volume ~/gitlab/config:/etc/gitlab \  --volume ~/gitlab/logs:/var/log/gitlab \  --volume ~/gitlab/data:/var/opt/gitlab \  gitlab/gitlab-ce:latest gitlab-runner Order of initialization:
 install register custom config  documentation</description>
    </item>
    
    <item>
      <title>Apache Bench Test</title>
      <link>https://26huitailang.github.io/posts/test/ab-test/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/test/ab-test/</guid>
      <description>Apache Bench Test   GET
ab -c 10 -n 40 http://127.0.0.1:8000/api/v1/mzitu/tags/
  POST, https://blog.csdn.net/chenggong2dm/article/details/51850923
ab -n 1 -c 1 -p f:/postdata.txt -T application/x-www-form-urlencoded &amp;ldquo;http://127.0.0.1/abpost&amp;rdquo; ab -n 100 -c 10 -p data.json -T application/json http://127.0.0.1/api
  // postdata.txt </description>
    </item>
    
    <item>
      <title>Prometheus</title>
      <link>https://26huitailang.github.io/posts/k3s/prometheus/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/k3s/prometheus/</guid>
      <description>Prometheus 简介 概念  prometheus server exporter，用于server采集数据，有官方提供的node-exporter，也可以通过各种SDK自定义导出内容，暴露一个类似/metrics的路径用于采集  注意，exporter在多进程（gunicorn 多进程）模式下使用会有限制，参考文档   数据模型，和influxdb类似，是时序数据库，以metric为名称，多个label（key-value形式）组成：&amp;lt;metric name&amp;gt;{&amp;lt;label name&amp;gt;=&amp;lt;label value&amp;gt;, ...}  重载配置 Yes, sending SIGHUP to the Prometheus process or an HTTP POST request to the /-/reload endpoint will reload and apply the configuration file. The various components attempt to handle failing changes gracefully.</description>
    </item>
    
    <item>
      <title>PyCharm Docker</title>
      <link>https://26huitailang.github.io/posts/pycharm/docker/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/pycharm/docker/</guid>
      <description>PyCharm 使用 Docker pycharm use docker for development and stage
Development  使用windows和virtualbox，没有打开hyper-v所以无法使用docker，在虚拟机中使用docker并打开tcp，但是由于volume只能挂载宿主机，所以要先用pycharmm将文件拷贝到远程的映射目录，再使用。  此方法适合还没有准备开发环境和需要使用docker作为开发环境，但是windows本机没有docker的情况 我已使用虚拟机和pycharm远程同步功能达到同样的效果   在宿主机中开发时，可以很方便的将docker配置集成到configuration中  Stage PyCharm的docker也支持修改registry，如果有远程仓库需要的，也可以方便分发镜像</description>
    </item>
    
    <item>
      <title>Django打开gzip导致文件流content-length丢失</title>
      <link>https://26huitailang.github.io/posts/django/gzip/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/django/gzip/</guid>
      <description>Django打开gzip导致文件流content-length丢失 code GZipMiddleware
use gzip middleware will del response[&#39;Content-Length&#39;] if response.streaming. nginx gzip is the same problem.
If file feature is important. You&amp;rsquo;d better be independent from the api or system.</description>
    </item>
    
    <item>
      <title>k3s</title>
      <link>https://26huitailang.github.io/posts/k3s/k3s/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/k3s/k3s/</guid>
      <description>k3s 初次使用 multipass 环境准备  quick-start 参考1 参考2  # k3s1 node for master 192.168.64.5 multipass launch -v --name k3s1 20.04 multipass shell k3s1 curl -sfL https://get.k3s.io | sh - # default config sudo cat /etc/rancher/k3s/k3s.yaml # node-token sudo cat /var/lib/rancher/k3s/server/node-token # Check for Ready node, takes maybe 30 seconds sudo kubectl get nodes # k3s2 node 192.168.64.6 multipass launch -v --name k3s2 20.04 multipass shell k3s2 # add node to cluster # token in master cat /var/lib/rancher/k3s/server/node-token # K3S_NODE_NAME for unique hostname export K3S_TOKEN=x export K3S_URL=https://192.</description>
    </item>
    
    <item>
      <title>Golang搭建环境</title>
      <link>https://26huitailang.github.io/posts/golang/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/golang/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>Golang 开发环境准备和工具选择
参考Alikhll/golang-developer-roadmap。
更多关于golang的分享，参考Awesome-go
环境准备  加速/私有模块  开发编辑器/IDE  vim vscode goland  软件选择  CLI工具开发  cobra   Web  Gin🍺 Echo🍺 Beego go-swagger Iris   ORM  Gorm🍺 Xorm   DB  PG🍺 Redis🍺 MongoDB   Log  Zap Logrus   Websocket  gorilla/websocket   Task schedule  Gron    CI/CD  gitlab CI/CD githu actions teamcity  部署选择  docker supervisor  </description>
    </item>
    
    <item>
      <title>Multipass</title>
      <link>https://26huitailang.github.io/posts/linux/ubuntu/multipass/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/linux/ubuntu/multipass/</guid>
      <description>multipass to set development environment 官网
指定配置 $ multipass launch --name XXX -c 2 -d 20G -m 2G  删除 $ multipass delete --purge XXXXX  问题  macos下面使用virtualbox暂时拿不到ip，只能使用NAT，最好使用hyperkit windows下面也不行，尝试添加第二个网络(gui操作 or vboxmanager)，我这里使用了桥接，之后修改/etc/network/interfaces填写相关信息，重启之后查看网卡能获得ip  # ubuntu 18.04 allow-hotplug enp0s8 iface enp0s8 inet static address 10.200.242.200 netmask 255.0.0.0 gateway 10.0.0.3  ubuntu20.04操作:  修改 /etc/netplan/50-cloud-init.yaml 应用 sudo netplan apply 重启 sudo reboot    # ubuntu 20.04 /etc/netplan/50-cloud-init.yaml network: ethernets: enp0s3: dhcp4: true match: macaddress: 08:00:27:bc:97:36 set-name: enp0s3 version: 2 # change like following part network: ethernets: enp0s3: dhcp4: false addresses: [10.</description>
    </item>
    
    <item>
      <title>Toolbox</title>
      <link>https://26huitailang.github.io/posts/tools/toolbox/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/tools/toolbox/</guid>
      <description>Tool Hub 各个分类的工具汇总
开发 代码  nvim vscode jetbrains vim  接口测试  postman httpie jebrains http test curl  接口性能测试  vegeta  pssh + vegeta, pssh并行在多个计算机中执行命令，vegeta接口性能测试工具，支持代码修改、命令模式，输出json、text、gob、html等格式   apache benchmark(ab)  文档 markdown：
 typora，已收费 vscode + markdown + mermaid plugin  markdown mermaid plantUML   pandoc 构建文档  i18n  poedit  redis  another redis desktop manager redis desktop manager  密码  keepass, windows macpass, macos, keepss的mac实现  输入效率  atext, windows copyQ, windows afred, macos dash, macos  ssh/sftp  transmit, macos xshell, windows mobaxterm, windows  作图    工具 功能 价格 地址     draw.</description>
    </item>
    
    <item>
      <title>vue cors</title>
      <link>https://26huitailang.github.io/posts/vue/cors/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/vue/cors/</guid>
      <description>利用proxy 解决 Django Vue 开发环境中的跨域问题 最近使用 Django+Vue的组合快速的做一个项目，前段之前有看过，但是只是👀会了，这次实际操作，在前后端分离后的开发环境中踩了坑。
环境  Django + DRF Django Channels，主要是websocket vue-admin-template，一个开源的项目，很多东西都有实现，新手可以用来改改就用，还能学习  开发环境：
 wsgi, 8000 asgi, 8001 vue, 9528  问题  想像在使用nginx一样的透明的使用开发环境 django已经配置了corsheaders middleware了 尝试 axios显示指定地址和端口到8000的服务上，解决了axios实例的访问，但是使用 el-upload的表单时，发现就不好使了，localhost和其他不同域，拿不到 cookie中的csrftoken，导致被 django拒绝  解决 在查看了各种文档后，最有效的方案是devServer的proxy，这是webpack提供的功能，使用的是http-proxy-middleware这个中间件，文档很详细，可以看看。
目标：
 代理 /api的请求到8000端口的wsgi server 代理 /ws的请求到8001的asgi server   /api ---&amp;gt; localhost:8000/api localhost:9528 (cookie) -- /ws ---&amp;gt; localhost:8001/ws vue.conf.js
devServer: { ... proxy: { [process.env.VUE_APP_BASE_API]: { target: &amp;#39;http://127.0.0.1:8000&amp;#39;, changeOrigin: true, ws: false, pathRewrite: { [&amp;#39;^&amp;#39; + process.</description>
    </item>
    
    <item>
      <title>docker env file</title>
      <link>https://26huitailang.github.io/posts/docker/env/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/docker/env/</guid>
      <description>docker env file 在docker-compose 中使用以下方式导入.envfile。
web: build: . restart: always working_dir: /deploy/mysite command: ./service_web.sh env_file: - .env # environments .env
DOCKER=1 HOME=/deploy 想用shell script动态获取环境的CPU count 如果直接在.env 中写如下的内容，会报语法错误：
CPU_NUM=$(cat /proc/cpuinfo |grep processor|wc -l)  所以，在web服务的command: ./service_web.sh脚本中export一个变量，并在gunicorn中使用：
#!/bin/bash sleep 5 export CPU_NUM=$(cat /proc/cpuinfo |grep processor|wc -l) python manage.py collectstatic -v0 --noinput python manage.py migrate --noinput /usr/local/bin/gunicorn -w $((2*$CPU_NUM+1)) -b unix:/deploy/running/handle/django-tutorial-server.sock mysite.wsgi:application --log-level info </description>
    </item>
    
    <item>
      <title>docker 加速</title>
      <link>https://26huitailang.github.io/posts/docker/%E5%8A%A0%E9%80%9F/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/docker/%E5%8A%A0%E9%80%9F/</guid>
      <description>docker 加速 mac  ~/.docker/daemon.json 添加如下配置  { &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://registry.docker-cn.com&amp;#34;] } </description>
    </item>
    
    <item>
      <title>docker 管理工具</title>
      <link>https://26huitailang.github.io/posts/docker/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/docker/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
      <description>docker 管理工具 Portainer web服务
docker volume create portainer_data docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer  </description>
    </item>
    
    <item>
      <title>docker 阿里云仓库</title>
      <link>https://26huitailang.github.io/posts/docker/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%93%E5%BA%93/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/docker/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%93%E5%BA%93/</guid>
      <description>docker 阿里云仓库 登录阿里云Docker Registry $ sudo docker login --username=26huitailang@gmail.com registry.cn-hangzhou.aliyuncs.com  用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。
您可以在产品控制台首页修改登录密码。
遇到无法登录问题：
Error saving credentials: error storing credentials - err: exit status 1, out: `The name org.freedesktop.secrets was not provided by any .service files sudo apt install gnupg2 pass 从Registry中拉取镜像 $ sudo docker pull registry.cn-hangzhou.aliyuncs.com/26huitailang/golang-web:[镜像版本号]
将镜像推送到Registry $ sudo docker login --username=26huitailang@gmail.com registry.cn-hangzhou.aliyuncs.com $ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/26huitailang/golang-web:[镜像版本号] $ sudo docker push registry.cn-hangzhou.aliyuncs.com/26huitailang/golang-web:[镜像版本号]  请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。
选择合适的镜像仓库地址 从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。
如果您使用的机器位于VPC网络，请使用 registry-vpc.</description>
    </item>
    
    <item>
      <title>Cheatsheet for pkg manager</title>
      <link>https://26huitailang.github.io/posts/cheatsheet/pkg-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/cheatsheet/pkg-manager/</guid>
      <description>Cheatsheet for package manager  go mod pip apt ubuntu 20.04  pip pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package
升级 pip 到最新的版本 (&amp;gt;=10.0.0) 后进行配置：
pip install pip -U pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
如果您到 pip 默认源的网络连接较差，临时使用本镜像站来升级 pip：
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U
apt ubuntu 20.04
# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse # deb-src https://mirrors.</description>
    </item>
    
    <item>
      <title>Cobra 命令行</title>
      <link>https://26huitailang.github.io/posts/golang/cobra/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/golang/cobra/</guid>
      <description>Cobra 命令行 因为之前写 Django，python manage.py这个命令非常好用，想看看能不能实现类似的效果。搜索之后发现了更强的cobra，看简介中使用的项目就知道非常不错。代码组织参考的frp的。
PATH/frp/cmd，frpc和fprs分别是客户端和服务端
├───frpc │ │ main.go │ │ │ └───sub │ http.go │ https.go │ reload.go │ root.go │ status.go │ stcp.go │ sudp.go │ tcp.go │ tcpmux.go │ udp.go │ xtcp.go │ └───frps main.go root.go 添加 go get -u github.com/spf13/cobra/cobra 在项目目录中执行，appname mycli，其中cmd中 rootCmd 的名称是mycli，这里建议和appname一样，后面可以直接go install之后使用mycli即可。
mkdir cmd &amp;amp;&amp;amp; cd cmd cobra init mycli --pkg-name mycli cmd └───mycli │ LICENSE │ main.go │ └───cmd root.go 模板代码 import错误，重新按照自己项目的组织方式重写 import即可。</description>
    </item>
    
    <item>
      <title>docker install</title>
      <link>https://26huitailang.github.io/posts/docker/debian-docker-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/docker/debian-docker-install/</guid>
      <description>docker install install docker on Debian/Ubuntu
link
Uninstall old versions $ sudo apt-get remove docker docker-engine docker.io containerd runc Set up the repository $ sudo apt-get update $ sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg-agent \ software-properties-common $ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - or $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add - $ sudo apt-key fingerprint 0EBFCD88 $ sudo add-apt-repository \ &amp;quot;deb [arch=amd64] https://download.</description>
    </item>
    
    <item>
      <title>Docker Private Registry</title>
      <link>https://26huitailang.github.io/posts/docker/%E7%A7%81%E6%9C%89registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/docker/%E7%A7%81%E6%9C%89registry/</guid>
      <description>Docker Private Registry 简单使用，官方 官方提供的 https://hub.docker.com/_/registry
Run a local registry: Quick Version
$ docker run -d -p 5000:5000 --restart always --name registry registry:2  Now, use it from within Docker:
$ docker pull ubuntu $ docker tag ubuntu localhost:5000/ubuntu $ docker push localhost:5000/ubuntu  更复杂的需求，harbor https://goharbor.io/
Our mission is to be the trusted cloud native repository for Kubernetes</description>
    </item>
    
    <item>
      <title>etcd 尝试</title>
      <link>https://26huitailang.github.io/posts/etcd/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/etcd/readme/</guid>
      <description>etcd 尝试 vagrant # -*- mode: ruby -*- # vi: set ft=ruby : servers = { :etcd1 =&amp;gt; &#39;192.168.1.21&#39;, :etcd2 =&amp;gt; &#39;192.168.1.22&#39;, :etcd3 =&amp;gt; &#39;192.168.1.23&#39; } Vagrant.configure(&amp;quot;2&amp;quot;) do |config| config.vm.box = &amp;quot;ubuntu/focal64&amp;quot; servers.each do |server_name, server_ip| config.vm.define server_name do |server_config| server_config.vm.hostname = &amp;quot;#{server_name.to_s}&amp;quot; server_config.vm.network :private_network, ip: server_ip server_config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb| vb.name = server_name.to_s if vb.name == &amp;quot;etcd1&amp;quot; vb.memory = 1024 vb.cpus = 1 else vb.memory = 1024 vb.cpus = 1 end end end end end install install.</description>
    </item>
    
    <item>
      <title>pip 离线安装</title>
      <link>https://26huitailang.github.io/posts/python/pip/%E6%89%93%E5%8C%85%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/python/pip/%E6%89%93%E5%8C%85%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</guid>
      <description>pip 离线安装 打包 注意，要在同平台打包，否则有些包不能正确安装。
在已有的环境中，一般是一个虚拟环境：
 pip freeze &amp;gt; pip-requirements.txt pip download -d pip-packages -r pip-requirements.txt，将提取的包下载到pip-packages文件夹中  安装  将pip-requirements.txt和pip-packages文件夹，拷贝到目标环境的同目录下 pip install &amp;ndash;no-index &amp;ndash;find-links=pip-packages -r pip-requirements.txt  参考  断网环境下一键安装 python3 离线安装包及其依赖  </description>
    </item>
    
    <item>
      <title>pipenv</title>
      <link>https://26huitailang.github.io/posts/python/pip/pipenv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/python/pip/pipenv/</guid>
      <description>pipenv pip和virtualenv的组合，使用Pipfile来替换旧的requirements.txt方式。
 documentation zhihu 参考 segmentfault 参考  安装 安装到系统常用的python版本下，mac可以使用brew安装
$ pip install pipenv  创建虚拟环境 $ pipenv install --three django  创建一个python3的虚拟环境并安装django，随机生成一个和当前文件夹名有关的虚拟环境。也可以用过--python 3.7指定python版本。
 TODO， 不能指定名称吗？  进入虚拟环境 $ pipenv shell  不过就算不进入环境，pipenv install依然可以正确安装包到对应的环境。
新环境依赖 自动识别Pipfile，然后安装。
$ pipenv install  一并安装开发环境的包：
$ pipenv install --dev  区别开发环境 在安装包的时候添加一个--dev选项，会分类到开发依赖。
更换源 更换Pipfile中的source-url
[[source]] url = &amp;quot;https://mirrors.aliyun.com/pypi/simple&amp;quot; verify_ssl = true name = &amp;quot;pypi&amp;quot;  设置环境变量 PIPENV_PYPI_MIRROR 效果相同。类似指定&amp;ndash;pypi-mirror选项：
$ pipenv install --pypi-mirror https://mirrors.</description>
    </item>
    
    <item>
      <title>PostgreSQL 分表</title>
      <link>https://26huitailang.github.io/posts/postgresql/partition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/postgresql/partition/</guid>
      <description>PostgreSQL 分表 继承实现更灵活，可以直接在已有数据的表上实现，不用重新迁移。
-- https://www.postgresql.org/docs/current/ddl-partitioning.html -- zh -- http://postgres.cn/docs/11/ddl-partitioning.html -- keyword: further redirect  -- 已有数据分表，因为主表不能有数据，所以需要先备份，创建分表和规则完毕后重新插入 -- 或者用新的表名，之后再分批读取插入  -- 创建主表 CREATE TABLE measurement ( city_id int not null, logdate date not null, peaktemp int, unitsales int ) PARTITION BY RANGE (logdate); -- 创建分表及规则 -- 还可以通过partition by 再次创建sub-partitioning，对插入measurement_y2006m02的数据再次重定向 -- CREATE TABLE measurement_y2006m02 PARTITION OF measurement -- FOR VALUES FROM (&amp;#39;2006-02-01&amp;#39;) TO (&amp;#39;2006-03-01&amp;#39;) -- PARTITION BY RANGE (peaktemp); CREATE TABLE measurement_y2006m02 PARTITION OF measurement FOR VALUES FROM (&amp;#39;2006-02-01&amp;#39;) TO (&amp;#39;2006-03-01&amp;#39;); CREATE TABLE measurement_y2006m03 PARTITION OF measurement FOR VALUES FROM (&amp;#39;2006-03-01&amp;#39;) TO (&amp;#39;2006-04-01&amp;#39;); -- 创建索引，自动再每个分区上创建索引 CREATE INDEX ON measurement (logdate); -- Ensure that the enable_partition_pruning configuration parameter is not disabled in postgresql.</description>
    </item>
    
    <item>
      <title>TeamCity 搭建CI/CD</title>
      <link>https://26huitailang.github.io/posts/teamcity/teamcity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/teamcity/teamcity/</guid>
      <description>Teamcity 搭建CI/CD install server
mkdir teamcity_server docker run -it --name teamcity-server-instance \  -v /home/ubuntu/teamcity_server/datadir:/data/teamcity_server/datadir \  -v /home/ubuntu/teamcity_server/logs:/opt/teamcity/logs \  -p 8111:8111 \  jetbrains/teamcity-server  agent, conf 有权限问题，最好在root运行 如果要使用docker-in-docker特性（sudo command not found），请使用linux-sudo tag的image  sudo docker run -it -e SERVER_URL=&amp;#34;http://10.200.160.4:8111&amp;#34; \  -u 0 \  -v docker_volumes:/var/lib/docker \  -v /var/run/docker.sock:/var/run/docker.sock \  -v /opt/buildagent/work:/opt/buildagent/work \  -v /opt/buildagent/temp:/opt/buildagent/temp \  -v /opt/buildagent/tools:/opt/buildagent/tools \  -v /opt/buildagent/plugins:/opt/buildagent/plugins \  -v /opt/buildagent/system:/opt/buildagent/system \  --privileged -e DOCKER_IN_DOCKER=start \  -v /home/ubuntu/teamcity_agent/conf:/data/teamcity_agent/conf \  jetbrains/teamcity-agent register agent agent 安装好后，在server UI/Agents 中进行认证授权。待agent就绪后，可以添加需要的项目和操作等。</description>
    </item>
    
    <item>
      <title>Vagrant</title>
      <link>https://26huitailang.github.io/posts/vagrant/vagrant/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/vagrant/vagrant/</guid>
      <description>如何使用 Vagrant 快速搭建环境 加速 可以直接从国内镜像下载 box格式的文件，然后用 vagrant box add NAME URL添加
# 自己下载 https://mirrors.tuna.tsinghua.edu.cn/ubuntu-cloud-images/focal/current/  制作自己的box 官方文档
正常安装镜像，然后安装基础环境
导出
vagrant package --base ubuntu20.04 --output ./ubuntu2004.box  添加box
vagrant box add ubuntu2004 .\ubuntu2004.box  如果没有Vagrantfile，则初始化
vagrant box add ubuntu2004 .\ubuntu2004.box  启动
vagrant up  VagrantFile # -*- mode: ruby -*- # vi: set ft=ruby : servers = { :k3s1 =&amp;gt; &amp;#39;192.168.1.21&amp;#39;, :k3s2 =&amp;gt; &amp;#39;192.168.1.22&amp;#39;, :k3s3 =&amp;gt; &amp;#39;192.168.1.23&amp;#39; } Vagrant.configure(&amp;#34;2&amp;#34;) do |config| # 可以指定自己导出的box config.</description>
    </item>
    
    <item>
      <title>wheel</title>
      <link>https://26huitailang.github.io/posts/python/pip/wheel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/python/pip/wheel/</guid>
      <description>wheel 提供给系统组的wheel包构建，要求none-any
以oss2包为例
pip download oss2 --platform=any --abi=none --no-deps 查看setup.py中的依赖，分别用上面的命令下载，获得所有的源码包。
打包wheel，universal选项可以打包忽略平台和架构的包;如果包里面含有c extension是不支持universal的，必须是纯python实现
python .\setup.py bdist_wheel --universal 如果遇到打包错误 error: invalid command &#39;bdist_wheel&#39;，可以修改setup.py使用setuptools的setup方法：
# from distutils.core import setup from setuptools import setup </description>
    </item>
    
  </channel>
</rss>
