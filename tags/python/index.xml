<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>python on Peter&#39;s Blog</title>
    <link>https://26huitailang.github.io/tags/python/</link>
    <description>Recent content in python on Peter&#39;s Blog</description>
    <image>
      <title>Peter&#39;s Blog</title>
      <url>https://26huitailang.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://26huitailang.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 13 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://26huitailang.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>开发环境</title>
      <link>https://26huitailang.github.io/posts/devenv/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/devenv/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>开发编辑器/IDE vim vscode goland pycharm CI/CD gitlab CI/CD github actions teamcity 部署选择 docker supervisor pm2 systemd 网络工具 wireshark socat tcpdump Go Golang 开发环境准备和工具选择
参考Alikhll/golang-developer-roadmap。
更多关于golang的分享，参考Awesome-go
包管理 加速/私有模块 组件 CLI工具开发 cobra Config viper Web Gin🍺 Echo🍺 Beego go-swagger Iris ORM Gorm🍺 Xorm DB PG🍺 Redis🍺 MongoDB Log Zap🍺 Logrus Websocket gorilla/websocket Task schedule Gron test testify convey, bdd python lint black isort darker </description>
    </item>
    
    <item>
      <title>Pyenv</title>
      <link>https://26huitailang.github.io/posts/python/pyenv/</link>
      <pubDate>Wed, 17 May 2023 21:57:16 +0800</pubDate>
      
      <guid>https://26huitailang.github.io/posts/python/pyenv/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>Compile</title>
      <link>https://26huitailang.github.io/posts/python/compile/</link>
      <pubDate>Fri, 14 Oct 2022 15:36:32 +0800</pubDate>
      
      <guid>https://26huitailang.github.io/posts/python/compile/</guid>
      <description>Desc Text.</description>
    </item>
    
    <item>
      <title>Fastapi</title>
      <link>https://26huitailang.github.io/posts/python/fastapi/</link>
      <pubDate>Wed, 27 Jul 2022 10:11:58 +0800</pubDate>
      
      <guid>https://26huitailang.github.io/posts/python/fastapi/</guid>
      <description>middleware or dependency 官方说明
场景：
项目使用了sqlite+sqlalchemy，暂时不支持async方式访问，但是fastapi的middleware的 __call__ 方法必须是async，如果在middleware中去做用户会话管理等和db相关的io操作可能导致整个应用阻塞。
解决：
使用def的dependency组合完成相关操作
官方对于两个组件的对比说明：
middleware 代码多一些，更复杂一些 必须是async方法 任何需要IO代码的添加都可能导致整个应用速度变慢或者阻塞 每个请求都会执行相关代码，如果是db的话，即使路由函数不需要也会创建 </description>
    </item>
    
    <item>
      <title>Playwright</title>
      <link>https://26huitailang.github.io/posts/test/playwright/</link>
      <pubDate>Thu, 24 Mar 2022 17:12:16 +0800</pubDate>
      
      <guid>https://26huitailang.github.io/posts/test/playwright/</guid>
      <description>image docker pull mcr.microsoft.com/playwright/python:v1.20.0-focal
本地环境 pip install playwright -i https://pypi.tuna.tsinghua.edu.cn/simple playwright install</description>
    </item>
    
    <item>
      <title>Cheatsheet for pkg manager</title>
      <link>https://26huitailang.github.io/posts/cheatsheet/pkg-manager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/cheatsheet/pkg-manager/</guid>
      <description>Cheatsheet for package manager go mod pip apt ubuntu 20.04 pip pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package
升级 pip 到最新的版本 (&amp;gt;=10.0.0) 后进行配置：
pip install pip -U pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
如果您到 pip 默认源的网络连接较差，临时使用本镜像站来升级 pip：
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U
apt ubuntu 20.04
# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse # deb-src https://mirrors.</description>
    </item>
    
    <item>
      <title>pdm</title>
      <link>https://26huitailang.github.io/posts/python/pdm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/python/pdm/</guid>
      <description>github, A modern Python package manager with PEP 582 support.
仅在__pypackages__/&amp;lt;major.minor&amp;gt;包含必要的依赖和bin文件，没有解释器相关文件 就算python解释器被删除了，但是只要有其他符合pyproject.yoml规定版本的解释器即可，项目目录下的__pypackages__不包含解释器相关的内容，venv则必须重新关联或者重新创建 $ tree -L 3 __pypackages__ __pypackages__ └── 3.10 ├── bin │ ├── django-admin │ └── sqlformat ├── include └── lib ├── Django-4.0.1.dist-info ├── anyio ├── anyio-3.5.0.dist-info ├── asgiref ├── asgiref-3.4.1.dist-info ├── django ... install brew install pdm demo mkdir pdm-demo cd pdm-demo pdm init Creating a pyproject.toml for PDM... Please enter the Python interpreter to use ... 12. /usr/local/Cellar/pdm/1.</description>
    </item>
    
    <item>
      <title>pip 离线安装</title>
      <link>https://26huitailang.github.io/posts/python/pip/%E6%89%93%E5%8C%85%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/python/pip/%E6%89%93%E5%8C%85%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85/</guid>
      <description>pip 离线安装 打包 注意，要在同平台打包，否则有些包不能正确安装。
在已有的环境中，一般是一个虚拟环境：
pip freeze &amp;gt; pip-requirements.txt pip download -d pip-packages -r pip-requirements.txt，将提取的包下载到pip-packages文件夹中 安装 将pip-requirements.txt和pip-packages文件夹，拷贝到目标环境的同目录下 pip install &amp;ndash;no-index &amp;ndash;find-links=pip-packages -r pip-requirements.txt 参考 断网环境下一键安装 python3 离线安装包及其依赖 下载依赖 pip-download
example
pip install pip-download pip-download -p win_amd64 -p none-any fabric </description>
    </item>
    
    <item>
      <title>pipenv</title>
      <link>https://26huitailang.github.io/posts/python/pip/pipenv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/python/pip/pipenv/</guid>
      <description>pipenv pip和virtualenv的组合，使用Pipfile来替换旧的requirements.txt方式。
documentation zhihu 参考 segmentfault 参考 安装 安装到系统常用的python版本下，mac可以使用brew安装
$ pip install pipenv 创建虚拟环境 $ pipenv install --three django 创建一个python3的虚拟环境并安装django，随机生成一个和当前文件夹名有关的虚拟环境。也可以用过--python 3.7指定python版本。
TODO， 不能指定名称吗？ 进入虚拟环境 $ pipenv shell 不过就算不进入环境，pipenv install依然可以正确安装包到对应的环境。
新环境依赖 自动识别Pipfile，然后安装。
$ pipenv install 一并安装开发环境的包：
$ pipenv install --dev 区别开发环境 在安装包的时候添加一个--dev选项，会分类到开发依赖。
更换源 更换Pipfile中的source-url
[[source]] url = &amp;quot;https://mirrors.aliyun.com/pypi/simple&amp;quot; verify_ssl = true name = &amp;quot;pypi&amp;quot; 设置环境变量 PIPENV_PYPI_MIRROR 效果相同。类似指定&amp;ndash;pypi-mirror选项：
$ pipenv install --pypi-mirror https://mirrors.aliyun.com/pypi/simple 查看安装的包 $ pipenv graph 不仅可以看到安装包，还可以看到依赖关系。
Django==2.1.7 - pytz [required: Any, installed: 2018.</description>
    </item>
    
    <item>
      <title>wheel</title>
      <link>https://26huitailang.github.io/posts/python/pip/wheel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://26huitailang.github.io/posts/python/pip/wheel/</guid>
      <description>wheel 提供给系统组的wheel包构建，要求none-any
以oss2包为例
pip download oss2 --platform=any --abi=none --no-deps 查看setup.py中的依赖，分别用上面的命令下载，获得所有的源码包。
打包wheel，universal选项可以打包忽略平台和架构的包;如果包里面含有c extension是不支持universal的，必须是纯python实现
python .\setup.py bdist_wheel --universal 如果遇到打包错误 error: invalid command &#39;bdist_wheel&#39;，可以修改setup.py使用setuptools的setup方法：
# from distutils.core import setup from setuptools import setup </description>
    </item>
    
  </channel>
</rss>
