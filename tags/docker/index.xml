<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>docker on Peter&#39;s Blog</title>
    <link>http://localhost:8000/tags/docker/</link>
    <description>Recent content in docker on Peter&#39;s Blog</description>
    <image>
      <url>http://localhost:8000/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:8000/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 22 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:8000/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PyCharm Docker</title>
      <link>http://localhost:8000/posts/pycharm/docker/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/posts/pycharm/docker/</guid>
      <description>PyCharm 使用 Docker pycharm use docker for development and stage
Development  使用windows和virtualbox，没有打开hyper-v所以无法使用docker，在虚拟机中使用docker并打开tcp，但是由于volume只能挂载宿主机，所以要先用pycharmm将文件拷贝到远程的映射目录，再使用。  此方法适合还没有准备开发环境和需要使用docker作为开发环境，但是windows本机没有docker的情况 我已使用虚拟机和pycharm远程同步功能达到同样的效果   在宿主机中开发时，可以很方便的将docker配置集成到configuration中  Stage PyCharm的docker也支持修改registry，如果有远程仓库需要的，也可以方便分发镜像</description>
    </item>
    
    <item>
      <title>docker env file</title>
      <link>http://localhost:8000/posts/docker/env/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/posts/docker/env/</guid>
      <description>docker env file 在docker-compose 中使用以下方式导入.envfile。
web: build: . restart: always working_dir: /deploy/mysite command: ./service_web.sh env_file: - .env # environments .env
DOCKER=1 HOME=/deploy 想用shell script动态获取环境的CPU count 如果直接在.env 中写如下的内容，会报语法错误：
CPU_NUM=$(cat /proc/cpuinfo |grep processor|wc -l)  所以，在web服务的command: ./service_web.sh脚本中export一个变量，并在gunicorn中使用：
#!/bin/bash sleep 5 export CPU_NUM=$(cat /proc/cpuinfo |grep processor|wc -l) python manage.py collectstatic -v0 --noinput python manage.py migrate --noinput /usr/local/bin/gunicorn -w $((2*$CPU_NUM+1)) -b unix:/deploy/running/handle/django-tutorial-server.sock mysite.wsgi:application --log-level info </description>
    </item>
    
    <item>
      <title>docker 使用</title>
      <link>http://localhost:8000/posts/docker/usage/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/posts/docker/usage/</guid>
      <description>docker 使用 zsh插件支持docker和docker-compose，gui工具在mac和win下有kitemactic。
Dockfile 用于构建image的文件。
docker-compose.yml 管理和使用docker服务的工具，可以类似vagrant的配置，可以很快的编排需要的services以及networks并启动。
 docker-compose -f YML-CONF-FILE up，可以指定配置文件启动，这样可以区别正式环境和开发环境的docker  up可以是别没有的服务并重新build，也可以用&amp;ndash;build强制    重新build镜像 不使用缓存重新build。修改配置后。
docker build . --no-cache  </description>
    </item>
    
    <item>
      <title>docker 加速</title>
      <link>http://localhost:8000/posts/docker/%E5%8A%A0%E9%80%9F/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/posts/docker/%E5%8A%A0%E9%80%9F/</guid>
      <description>docker 加速 mac  ~/.docker/daemon.json 添加如下配置  { &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://registry.docker-cn.com&amp;#34;] } </description>
    </item>
    
    <item>
      <title>docker 容器导出和导入</title>
      <link>http://localhost:8000/posts/docker/%E5%AE%B9%E5%99%A8%E5%AF%BC%E5%87%BA%E5%92%8C%E5%AF%BC%E5%85%A5/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/posts/docker/%E5%AE%B9%E5%99%A8%E5%AF%BC%E5%87%BA%E5%92%8C%E5%AF%BC%E5%85%A5/</guid>
      <description>docker 容器导出和导入 在一个地方build后导入到其他地方使用
https://yeasy.gitbooks.io/docker_practice/container/import_export.html
导出 $ docker container ls -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 7691a814370e ubuntu:18.04 &amp;quot;/bin/bash&amp;quot; 36 hours ago Exited (0) 21 hours ago test $ docker export 7691a814370e &amp;gt; ubuntu.tar  导入 $ cat ubuntu.tar | docker import - test/ubuntu:v1.0 $ docker image ls REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE test/ubuntu v1.0 9d37a6082e97 About a minute ago 171.3 MB  此外，也可以通过指定 URL 或者某个目录来导入，例如</description>
    </item>
    
    <item>
      <title>docker 快速扩容</title>
      <link>http://localhost:8000/posts/docker/%E6%89%A9%E5%AE%B9/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/posts/docker/%E6%89%A9%E5%AE%B9/</guid>
      <description>docker 快速扩容 以celery worker为例。当启动docker-compose up后，可以看到有一个celery-worker容器在运行。
如果要临时增加，可以使用--scale参数配合up指令，接受多个容器传递：
docker-compose up --scale web=2 celery-worker=3  经测试，多个worker都获得了发送过来的任务。</description>
    </item>
    
    <item>
      <title>docker 日志</title>
      <link>http://localhost:8000/posts/docker/logs/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/posts/docker/logs/</guid>
      <description>docker 日志 后台运行docker的时候，怎么查看日志？
docker logs SERVICE_NAME  </description>
    </item>
    
    <item>
      <title>docker 清理</title>
      <link>http://localhost:8000/posts/docker/%E6%B8%85%E7%90%86/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/posts/docker/%E6%B8%85%E7%90%86/</guid>
      <description>docker 清理   怎么清理不用的容器和镜像？
  docker占用过多的磁盘空间？
  如何清理Docker占用的磁盘空间?
  查看 使用docker system命令。查看磁盘使用情况：
$ docker system df  清理 docker rmi $(docker images --filter &amp;quot;dangling=true&amp;quot; -q)  清理磁盘，删除关闭的容器、无用的数据卷、网络，以及dangling镜像（无tag的镜像）。
$ docker system prune  更彻底的删除，将没有容器使用的镜像删除：
$ docker system prune -a  删除none镜像 $ docker rmi $(docker images | grep &amp;quot;none&amp;quot; | awk &#39;{print $3}&#39;) //删除镜像  限制容器大小 如nginx，限制该容器的日志文件大小，可以在docker-compose中写入选项max-size:
nginx: image: nginx:1.12.1 restart: always logging: driver: &amp;#34;json-file&amp;#34; options: max-size: &amp;#34;5g&amp;#34; </description>
    </item>
    
    <item>
      <title>docker 管理工具</title>
      <link>http://localhost:8000/posts/docker/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/posts/docker/%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</guid>
      <description>docker 管理工具 kitematic 可以上dockerhub，但是UI不是很好，容器名字看不全，不能拖动界面
Portainer web服务
docker volume create portainer_data docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer  </description>
    </item>
    
    <item>
      <title>docker 阿里云仓库</title>
      <link>http://localhost:8000/posts/docker/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%93%E5%BA%93/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/posts/docker/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%93%E5%BA%93/</guid>
      <description>docker 阿里云仓库 登录阿里云Docker Registry $ sudo docker login --username=26huitailang@gmail.com registry.cn-hangzhou.aliyuncs.com  用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。
您可以在产品控制台首页修改登录密码。
遇到无法登录问题：
Error saving credentials: error storing credentials - err: exit status 1, out: `The name org.freedesktop.secrets was not provided by any .service files sudo apt install gnupg2 pass 从Registry中拉取镜像 $ sudo docker pull registry.cn-hangzhou.aliyuncs.com/26huitailang/golang-web:[镜像版本号]
将镜像推送到Registry $ sudo docker login --username=26huitailang@gmail.com registry.cn-hangzhou.aliyuncs.com $ sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/26huitailang/golang-web:[镜像版本号] $ sudo docker push registry.cn-hangzhou.aliyuncs.com/26huitailang/golang-web:[镜像版本号]  请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。
选择合适的镜像仓库地址 从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。
如果您使用的机器位于VPC网络，请使用 registry-vpc.</description>
    </item>
    
    <item>
      <title>docker install</title>
      <link>http://localhost:8000/posts/docker/debian-docker-install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/posts/docker/debian-docker-install/</guid>
      <description>docker install install docker on Debian/Ubuntu
link
Uninstall old versions $ sudo apt-get remove docker docker-engine docker.io containerd runc Set up the repository $ sudo apt-get update $ sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg-agent \ software-properties-common $ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - or $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add - $ sudo apt-key fingerprint 0EBFCD88 $ sudo add-apt-repository \ &amp;quot;deb [arch=amd64] https://download.</description>
    </item>
    
    <item>
      <title>Docker Private Registry</title>
      <link>http://localhost:8000/posts/docker/%E7%A7%81%E6%9C%89registry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:8000/posts/docker/%E7%A7%81%E6%9C%89registry/</guid>
      <description>Docker Private Registry 简单使用，官方 官方提供的 https://hub.docker.com/_/registry
Run a local registry: Quick Version
$ docker run -d -p 5000:5000 --restart always --name registry registry:2  Now, use it from within Docker:
$ docker pull ubuntu $ docker tag ubuntu localhost:5000/ubuntu $ docker push localhost:5000/ubuntu  更复杂的需求，harbor https://goharbor.io/
Our mission is to be the trusted cloud native repository for Kubernetes</description>
    </item>
    
  </channel>
</rss>
